//
//  NeedleTailIRC+TransportProtocols.swift
//  needletail-irc
//
//  Created by Cole M on 9/28/22.
//
//  Copyright (c) 2025 NeedleTails Organization.
//  This project is licensed under the MIT License.
//
//  See the LICENSE file for more information.
//
//  This file is part of the NeedleTailIRC SDK, which provides
//  IRC protocol implementation and messaging capabilities.
//

import struct NIOCore.ByteBuffer
import struct NIOCore.NIOAsyncChannelOutboundWriter
import Logging
import NeedleTailLogger
import NeedleTailAsyncSequence

/// A protocol that defines methods for transporting messages in an IRC context.
/// Conforming types must be classes and are required to be `Sendable` for safe concurrency.
public protocol NeedleTailWriterDelegate: AnyObject, Sendable {
    
    /// Transports a stream of messages generated by the provided message generator.
    ///
    /// - Parameters:
    ///   - messageGenerator: An instance of `IRCMessageGenerator` that generates messages to be sent.
    ///   - executor: An optional executor of type `AnyExecutor` for managing task execution.
    ///   - consumer: An instance of `NeedleTailAsyncConsumer<ByteBuffer>` that handles the message consumption.
    ///   - logger: An instance of `NeedleTailLogger` for logging purposes. Defaults to a logger with a specific label.
    ///   - writer: An instance of `NIOAsyncChannelOutboundWriter<IRCMessage>` used to write the messages.
    ///   - origin: A `String` representing the origin of the messages. Defaults to an empty string.
    ///   - command: An instance of `IRCCommand` representing the command associated with the messages.
    ///   - tags: An optional array of `IRCTag` representing any tags associated with the messages.
    ///   - authPacket: An optional `AuthPacket` for authentication information.
    /// - Throws: An error if message transport fails.
    func transportMessage(
        _ messageGenerator: IRCMessageGenerator,
        executor: any AnyExecutor,
        logger: NeedleTailLogger,
        writer: NIOAsyncChannelOutboundWriter<IRCPayload>,
        origin: String,
        command: IRCCommand,
        tags: [IRCTag]?,
        authPacket: NeedleTailIRC.AuthPacket?
    ) async throws
    
    /// Sends and flushes a message using the provided parameters.
    ///
    /// - Parameters:
    ///   - consumer: An instance of `NeedleTailAsyncConsumer<ByteBuffer>` that handles the message consumption.
    ///   - executor: An optional executor of type `AnyExecutor` for managing task execution.
    ///   - logger: An instance of `NeedleTailLogger` for logging purposes.
    ///   - writer: An instance of `NIOAsyncChannelOutboundWriter<IRCMessage>` used to write the message.
    ///   - message: An instance of `IRCMessage` representing the message to be sent.
    /// - Throws: An error if sending or flushing the message fails.
    func sendAndFlushMessage<OutboundOut>(
        executor: (any AnyExecutor)?,
        logger: NeedleTailLogger,
        writer: NIOAsyncChannelOutboundWriter<OutboundOut>,
        message: OutboundOut
    ) async throws
}

extension NeedleTailWriterDelegate {
    
    /// Transports a stream of messages generated by the provided message generator.
    ///
    /// - Parameters:
    ///   - messageGenerator: An instance of `IRCMessageGenerator` that generates messages to be sent.
    ///   - executor: An optional executor of type `AnyExecutor` for managing task execution.
    ///   - consumer: An instance of `NeedleTailAsyncConsumer<ByteBuffer>` that handles the message consumption.
    ///   - logger: An instance of `NeedleTailLogger` for logging purposes. Defaults to a logger with a specific label.
    ///   - writer: An instance of `NIOAsyncChannelOutboundWriter<IRCPayload>` used to write the messages.
    ///   - origin: A `String` representing the origin of the messages. Defaults to an empty string.
    ///   - command: An instance of `IRCCommand` representing the command associated with the messages.
    ///   - tags: An optional array of `IRCTag` representing any tags associated with the messages.
    ///   - authPacket: An optional `AuthPacket` for authentication information.
    /// - Throws: An error if message transport fails.
    public func transportMessage(
        _ messageGenerator: IRCMessageGenerator,
        executor: any AnyExecutor,
        logger: NeedleTailLogger = NeedleTailLogger("[ com.needletails.writer.delegate ]"),
        writer: NIOAsyncChannelOutboundWriter<IRCPayload>,
        origin: String = "",
        command: IRCCommand,
        tags: [IRCTag]? = nil,
        authPacket: NeedleTailIRC.AuthPacket? = nil
    ) async throws {
        let messageStream = await messageGenerator.createMessages(
            origin: origin,
            command: command,
            tags: tags,
            authPacket: authPacket,
            logger: logger
        )
        
        for try await message in messageStream {
            try await self.sendAndFlushMessage(
                executor: executor,
                logger: logger,
                writer: writer,
                message: .irc(message)
            )
        }
    }
    
    /// Sends and flushes a message using the provided parameters.
    ///
    /// This method handles both cases where an executor is provided and where it is not.
    ///
    /// - Parameters:
    ///   - consumer: An instance of `NeedleTailAsyncConsumer<ByteBuffer>` that handles the message consumption.
    ///   - executor: An optional executor of type `AnyExecutor` for managing task execution. If `nil`, the task will run without a specific executor.
    ///   - logger: An instance of `NeedleTailLogger` for logging purposes. Defaults to a logger with a specific label.
    ///   - writer: An instance of `NIOAsyncChannelOutboundWriter<IRCMessage>` used to write the message.
    ///   - message: An instance of `IRCMessage` representing the message to be sent.
    /// - Throws: An error if sending or flushing the message fails.
    public func sendAndFlushMessage<OutboundOut>(
        executor: (any AnyExecutor)? = nil,
        logger: NeedleTailLogger = NeedleTailLogger("[ com.needletails.writer.delegate ]"),
        writer: NIOAsyncChannelOutboundWriter<OutboundOut>,
        message: OutboundOut
    ) async throws {
        try await withThrowingDiscardingTaskGroup { group in
            if let executor {
                group.addTask(executorPreference: executor) {
                    try await self.writeMessage(
                        writer: writer,
                        message: message,
                        logger: logger
                    )
                }
            } else {
                group.addTask {
                    try await self.writeMessage(
                        writer: writer,
                        message: message,
                        logger: logger
                    )
                }
            }
        }
    }
    
    
    /// Writes a message to the provided writer.
    ///
    /// This method encodes the message and handles any errors that occur during the writing process.
    ///
    /// - Parameters:
    ///   - writer: An instance of `NIOAsyncChannelOutboundWriter<IRCMessage>` used to write the message.
    ///   - message: An instance of `IRCMessage` representing the message to be sent.
    ///   - logger: An instance of `NeedleTailLogger` for logging purposes.
    /// - Throws: An error if writing the message fails.
    private func writeMessage<OutboundOut>(
        writer: NIOAsyncChannelOutboundWriter<OutboundOut>,
        message: OutboundOut,
        logger: NeedleTailLogger
    ) async throws {
        do {
            try await writer.write(message)
        } catch {
            logger.log(level: .error, message: "Send And Flush Error: \(error)")
            throw error
        }
    }
}
